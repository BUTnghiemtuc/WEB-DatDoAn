const Food = require("../models/food.model");
const foodModel = require("../models/food.model");

exports.getAll = async (req, res) => {
  try {
    const foods = await Food.getAllFoods(); // <- G·ªåI T·ª™ model
    res.json(foods);
  } catch (err) {
    console.error("üî• L·ªói getAll:", err);
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch m√≥n ƒÉn", error: err.message });
  }
};

exports.getById = async (req, res) => {
  try {
    const food = await Food.getFoodById(req.params.id);
    if (!food) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn" });
    res.json(food);
  } catch (err) {
    res.status(500).json({ message: "L·ªói truy v·∫•n", error: err });
  }
};

exports.getByUserId = async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const foods = await foodModel.getFoodsByUserId(userId);
    res.json(foods);
  } catch (err) {
    console.error("üî• L·ªói getByUserId:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y m√≥n ƒÉn theo userId" });
  }
};

exports.getByRestaurant = async (req, res) => {
  try {
    const foods = await Food.getByRestaurant(req.params.id);
    res.json(foods);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y m√≥n ƒÉn theo nh√† h√†ng", error: err.message });
  }
};


exports.create = async (req, res) => {
  try {
    await Food.createFood(req.body);
    res.json({ message: "Th√™m m√≥n ƒÉn th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói th√™m m√≥n ƒÉn", error: err });
  }
};

exports.update = async (req, res) => {
  try {
    await Food.updateFood(req.params.id, req.body);
    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t", error: err });
  }
};

exports.updateAvailability = async (req, res) => {
  try {
    const foodId = parseInt(req.params.id);
    const { available } = req.body;
    await foodModel.updateFoodAvailability(foodId, available);
    res.json({ message: "C·∫≠p nh·∫≠t t√¨nh tr·∫°ng th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói updateAvailability:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};


exports.remove = async (req, res) => {
  try {
    await Food.deleteFood(req.params.id);
    res.json({ message: "X√≥a th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói x√≥a", error: err });
  }
};
