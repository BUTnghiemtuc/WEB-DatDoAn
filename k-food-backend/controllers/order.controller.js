const Order = require("../models/order.model");

exports.create = async (req, res) => {
  try {
    const { user_id, items, address, payment_method, total_price } = req.body;

    if (!user_id || !items?.length || !address || !payment_method || !total_price) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin ƒë∆°n h√†ng" });
    }

    // G·ªçi model x·ª≠ l√Ω ƒë·∫ßy ƒë·ªß: restaurant_id, shipper_id, status
    const orderId = await Order.createOrder(user_id, items, address, payment_method, total_price);

    res.json({ message: "ƒê·∫∑t h√†ng th√†nh c√¥ng", orderId });
  } catch (err) {
    console.error("üî• L·ªói t·∫°o ƒë∆°n h√†ng:", err);
    res.status(500).json({ message: "L·ªói t·∫°o ƒë∆°n h√†ng", error: err.message });
  }
};

exports.getByUser = async (req, res) => {
  try {
    const orders = await Order.getOrdersByUser(req.params.id);
    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y ƒë∆°n ng∆∞·ªùi d√πng", error: err.message });
  }
};

exports.getAll = async (req, res) => {
  try {
    const orders = await Order.getAllOrders();
    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y t·∫•t c·∫£ ƒë∆°n", error: err.message });
  }
};

exports.getById = async (req, res) => {
  try {
    const orderId = req.params.id;

    const order = await Order.getOrderInfo(orderId);
    const items = await Order.getOrderItems(orderId);

    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    res.json({ order, items });
  } catch (err) {
    console.error("üî• L·ªói khi t·∫£i chi ti·∫øt ƒë∆°n:", err);
    res.status(500).json({ message: "L·ªói chi ti·∫øt ƒë∆°n", error: err.message });
  }
};

exports.getPendingByUserId = async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const orders = await Order.getPendingOrdersByUser(userId);
    res.json(orders);
  } catch (err) {
    console.error("‚ùå L·ªói getPendingByUserId:", err);
    res.status(500).json({ message: "L·ªói server khi l·∫•y ƒë∆°n ch·ªù x·ª≠ l√Ω" });
  }
};

exports.getAssignedOrders = async (req, res) => {
  try {
    const orders = await Order.getAssignedOrders(parseInt(req.params.shipperId));
    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y ƒë∆°n giao", error: err.message });
  }
};

exports.getDeliveryHistory = async (req, res) => {
  try {
    const orders = await Order.getDeliveryHistory(parseInt(req.params.shipperId));
    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y l·ªãch s·ª≠ giao", error: err.message });
  }
};

exports.approveOrder = async (req, res) => {
  try {
    const orderId = parseInt(req.params.id);
    await Order.approveOrder(orderId);
    res.json({ message: "‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c duy·ªát" });
  } catch (err) {
    console.error("‚ùå L·ªói approveOrder:", err);
    res.status(500).json({ message: "L·ªói x·ª≠ l√Ω ƒë∆°n h√†ng" });
  }
};

exports.updateStatus = async (req, res) => {
  try {
    await Order.updateOrderStatus(req.params.id, req.body.status);
    res.json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i", error: err.message });
  }
};
